# generated by datamodel-codegen:
#   filename:  http://localhost:8000/openapi.json
#   timestamp: 2021-08-29T13:33:32+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Extra, Field, conint, constr


class HTTPNotFoundError(BaseModel):
    detail: str = Field(..., title='Detail')


class RoleIn(BaseModel):
    class Config:
        extra = Extra.forbid

    name: constr(max_length=16) = Field(..., title='Name')


class Status(BaseModel):
    message: str = Field(..., title='Message')


class USERSERVICESYSTEMPydanticHoldersRole(BaseModel):
    id: int = Field(..., title='Id')
    name: str = Field(..., title='Name')


class User(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=1, le=2147483647) = Field(..., title='Id')
    name: constr(max_length=64) = Field(..., title='Name')
    username: constr(max_length=64) = Field(..., title='Username')
    enabled: Optional[bool] = Field(True, title='Enabled')


class UserIn(BaseModel):
    class Config:
        extra = Extra.forbid

    name: constr(max_length=64) = Field(..., title='Name')
    username: constr(max_length=64) = Field(..., title='Username')
    password: constr(max_length=256) = Field(..., title='Password')
    enabled: Optional[bool] = Field(True, title='Enabled')


class UserRole(BaseModel):
    user: UserIn
    roles: List[USERSERVICESYSTEMPydanticHoldersRole] = Field(..., title='Roles')


class ValidationError(BaseModel):
    loc: List[str] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class AbcRole(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=1, le=2147483647) = Field(..., title='Id')
    name: constr(max_length=16) = Field(..., title='Name')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')
